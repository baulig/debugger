
AC_INIT(README)
AC_CANONICAL_SYSTEM
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(mono-debugger, 2.7)
AM_MAINTAINER_MODE

AC_CHECK_TOOL(CC, gcc, gcc)
AC_PROG_CC
AC_PROG_CXX
AM_PROG_CC_STDC
AM_PROG_CC_C_O
AC_PROG_INSTALL

build_warnings="-W -Wall -Wstrict-prototypes -Wmissing-prototypes"
AC_ARG_ENABLE(build-warnings,
[  --enable-build-warnings Enable build-time compiler warnings if gcc is used],
[case "${enableval}" in
  yes)	;;
  no)	build_warnings="-w";;
  ,*)   t=`echo "${enableval}" | sed -e "s/,/ /g"`
        build_warnings="${build_warnings} ${t}";;
  *,)   t=`echo "${enableval}" | sed -e "s/,/ /g"`
        build_warnings="${t} ${build_warnings}";;
  *)    build_warnings=`echo "${enableval}" | sed -e "s/,/ /g"`;;
esac
if test x"$silent" != x"yes" && test x"$build_warnings" != x""; then
  echo "Setting warning flags = $build_warnings" 6>&1
fi])dnl
WARN_CFLAGS=""
if test "x${build_warnings}" != x && test "x$GCC" = xyes ; then
    WARN_CFLAGS="${build_warnings}"
fi
AC_SUBST(WARN_CFLAGS)

check_mono=yes
csharp_library=yes
library_backend=yes
build_sysdeps=yes
remote_backend=no

AC_ARG_WITH(backend,
[  --backend Select backend (EXPERIMENTAL).],
[case "${withval}" in
 server-only)
   csharp_library=no
   library_backend=no
   build_sysdeps=yes
   remote_backend=no
   check_mono=no
   ;;
 remote-only)
   csharp_library=yes
   library_backend=no
   build_sysdeps=no
   remote_backend=yes
   check_mono=no
   ;;
 local-server)
   csharp_library=yes
   library_backend=no
   build_sysdeps=yes
   remote_backend=yes
   check_mono=no
   ;;
 *)
 AC_MSG_ERROR([Invalid --backend argument])
esac])

CC_FOR_BUILD=$CC
BUILD_EXEEXT=
if test "x$cross_compiling" = "xyes"; then
	CC_FOR_BUILD=cc
	BUILD_EXEEXT=""
fi
AC_SUBST(CC_FOR_BUILD)
AC_SUBST(HOST_CC)
AC_SUBST(BUILD_EXEEXT)

if test x$build_sysdeps = xyes; then
	AC_MSG_CHECKING([host platform characteristics])
	case "$host" in
	x86_64-*-linux*)
		server_cflags=-D_GNU_SOURCE -DHAVE_THREAD_DB
		platform=x86_linux
		using_eglib=no
		;;
	i[[3-7]]86-*-linux*)
		server_cflags=-D_GNU_SOURCE -DHAVE_THREAD_DB
		platform=x86_linux
		using_eglib=no
		;;
	arm-*-linux*)
		server_cflags=
		platform=arm_linux
		using_eglib=yes
		;;
	powerpc-apple-darwin*)
		server_cflags=
		platform=powerpc_darwin
		using_eglib=yes
		;;
	*86-apple-darwin*)
		server_cflags=
		platform=x86_darwin
		using_eglib=yes
		;;
	i386-pc-mingw32*)
		if test x$build_sysdeps != xyes; then
			AC_MSG_ERROR([*** This platform is not yet supported.])
		fi
		server_cflags='-DWINDOWS -DUNICODE -D_UNICODE'
		platform=x86_windows
		using_eglib=yes
		;;
	*)
		AC_MSG_ERROR([*** This platform is not yet supported.])
		;;
	esac
	AC_MSG_RESULT($platform)

	AC_CONFIG_SUBDIRS(sysdeps/bfd)
else
	server_cflags=
	platform=none
	using_eglib=no
fi

AM_CONDITIONAL(PLATFORM_X86_DARWIN, test x$platform = xx86_darwin)
AM_CONDITIONAL(PLATFORM_POWERPC_DARWIN, test x$platform = xpowerpc_darwin)
AM_CONDITIONAL(PLATFORM_X86_LINUX, test x$platform = xx86_linux)
AM_CONDITIONAL(PLATFORM_ARM_LINUX, test x$platform = xarm_linux)
AM_CONDITIONAL(PLATFORM_X86_WINDOWS, test x$platform = xx86_windows)

AC_ARG_WITH(eglib, [  --with-eglib            Build with eglib], using_eglib=yes)

if test x$using_eglib = xyes; then
	ac_configure_args="$ac_configure_args \"CPPFLAGS_FOR_EGLIB=$EGLIB_CPPFLAGS\" \"CFLAGS_FOR_EGLIB=$CFLAGS_FOR_EGLIB\""
	AC_CONFIG_SUBDIRS(sysdeps/eglib)
	AC_DEFINE([USING_EGLIB], [1], [Whether we're using eglib])
else
	check_mono=yes
fi
AC_MSG_CHECKING([whether we're using eglib])
AC_MSG_RESULT($using_eglib)
AM_CONDITIONAL(USING_EGLIB, test x$using_eglib = xyes)

AC_SUBST(glue_cflags)
AC_SUBST(server_cflags)

dnl These must be called before AM_PROG_LIBTOOL, because it may want
dnl to call AC_CHECK_PROG.
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)

# Set STDC_HEADERS
AC_HEADER_STDC
AM_PROG_LIBTOOL

# not 64 bit clean in cross-compile
AC_CHECK_SIZEOF(void *, 4)

CFLAGS="-g ${CFLAGS} -Wall -Wunused -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes  -Wmissing-prototypes -Wnested-externs  -Wshadow -Wpointer-arith -Wno-cast-qual -Wcast-align -Wwrite-strings -fno-strict-aliasing"

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi

pkg_config_path=
AC_ARG_WITH(crosspkgdir, [  --with-crosspkgdir=/path/to/pkg-config/dir],
	if test x$with_crosspkgdir = "x"; then
		if test -s $PKG_CONFIG_PATH; then
			pkg_config_path=$PKG_CONFIG_PATH
		fi
	else
		pkg_config_path=$with_crosspkgdir
		PKG_CONFIG_PATH=$pkg_config_path
		export PKG_CONFIG_PATH
	fi
)

## Versions of dependencies
GLIB_REQUIRED_VERSION=2.0.0
MONO_REQUIRED_VERSION=2.0
XSP_REQUIRED_VERSION=2.0

debugger_major_version=81
min_debugger_minor_version=0
symfile_major_version=50
min_symfile_minor_version=0

if test x$check_mono = xyes; then
	AC_MSG_CHECKING([Whether we're using Mono from trunk])
	## Check for Mono from trunk
	if pkg-config --modversion mono-2>/dev/null; then
		have_mono_trunk=true
		mono_pc=mono-2
		min_debugger_minor_version=6
		MONO_REQUIRED_VERSION=2.7
		server_deps="glib-2.0 >= $GLIB_REQUIRED_VERSION $martin_deps"
		AC_MSG_RESULT([yes])
	else
		have_mono_trunk=false
		mono_pc=mono
		server_deps="$mono_pc >= $MONO_REQUIRED_VERSION glib-2.0 >= $GLIB_REQUIRED_VERSION $martin_deps"
		AC_MSG_RESULT([no])
	fi

	## Versions of dependencies
	PKG_CHECK_MODULES(SERVER_DEPENDENCIES, $server_deps)

	GACUTIL_FLAGS='/package $(PACKAGE) /gacdir $(prefix)/lib /root $(DESTDIR)$(prefix)/lib'
	AC_PATH_PROG(GACUTIL, gacutil, no)
	if test "x$GACUTIL" = "xno" ; then
	   AC_MSG_ERROR([No gacutil tool found])
	fi
fi
AC_SUBST(SERVER_DEPENDENCIES_CFLAGS)
AC_SUBST(SERVER_DEPENDENCIES_LIBS)
AC_SUBST(GACUTIL)
AC_SUBST(GACUTIL_FLAGS)

## Check Cecil
if pkg-config --modversion cecil>/dev/null; then
	AC_MSG_RESULT("Found cecil.pc")
else
	AC_MSG_ERROR([You are missing Cecil (cecil.pc for packageconfig)])
fi

CECIL_ASM=`pkg-config --variable=Libraries cecil`
AC_SUBST(CECIL_ASM)

AC_SUBST(CFLAGS)

if test x$csharp_library = xyes; then
	mono_prefix="`$PKG_CONFIG --variable=prefix mono`"
	monodoc_prefix="`$PKG_CONFIG --variable=prefix monodoc`"
	AC_SUBST(mono_prefix)
	AC_SUBST(monodoc_prefix)

	AC_PATH_PROG(MONO, mono)
	AC_PATH_PROG(MCS, gmcs)
	AC_PATH_PROG(MONODIS, monodis)
	if test "x$MONO" = "x" ; then
	   AC_MSG_ERROR([Can't find "mono" in your PATH])
	fi
	if test "x$MCS" = "x" ; then
	   AC_MSG_ERROR([Can't find "mcs" in your PATH])
	fi
	if test "x$MONODIS" = "x" ; then
	   AC_MSG_ERROR([Can't find "monodis" in your PATH])
	fi

	AC_PATH_PROG(NUNIT_CONSOLE, nunit-console2)
	if test "x$NUNIT_CONSOLE" = "x" ; then
	  AC_MSG_ERROR([Can't find "nunit-console2" in your PATH])
	fi

	target_mono_prefix="$prefix"
	AC_ARG_WITH(target-mono,
	[  --with-target-mono      Manually override the Mono used for target applications],
		if test "x$with_target_mono" != "x"; then
		  target_mono_prefix=$with_target_mono
		  have_target_mono=yes
		fi
	)
	AC_SUBST(target_mono_prefix)

	if test "x$have_target_mono" = "xyes" ; then
	  TARGET_MCS="$target_mono_prefix/bin/gmcs"
	  TARGET_MONO="$target_mono_prefix/bin/mono"
	  TARGET_MONODIS="$target_mono_prefix/bin/monodis"
	  NUNIT_PREFIX="$target_mono_prefix"
	  NUNIT_VERSION=2.3
	else
	  TARGET_MCS="$MCS"
	  TARGET_MONO="$MONO"
	  TARGET_MONODIS="$MONODIS"

	  ## Check NUnit
	  if pkg-config --modversion mono-nunit>/dev/null; then
	    AC_MSG_RESULT("Found mono-nunit.pc")
	  else
	    AC_MSG_ERROR([Cannot find mono-nunit (mono-unit.pc for packageconfig)])
	  fi
	  NUNIT_PREFIX=`pkg-config --variable=prefix mono-nunit`
	  NUNIT_VERSION=`pkg-config --modversion mono-nunit`

	fi
	NUNIT_PREFIX=`cd $NUNIT_PREFIX && pwd`
	AC_SUBST(TARGET_MCS)
	AC_SUBST(TARGET_MONO)
	AC_SUBST(TARGET_MONODIS)
	AC_SUBST(NUNIT_PREFIX)
fi
AM_CONDITIONAL(HAVE_TARGET_MONO, test "x$have_target_mono" = "xyes")

real_top_srcdir=`pwd`
AC_SUBST(real_top_srcdir)
AC_SUBST(PATH)
AC_SUBST(LD_LIBRARY_PATH)

dnl
dnl BFD checks
dnl

if test `uname -s` = "Darwin"; then
       LIB_PREFIX=
       LIB_SUFFIX=.dylib
else
       LIB_PREFIX=.so
       LIB_SUFFIX=
fi

AC_SUBST(LIB_PREFIX)
AC_SUBST(LIB_SUFFIX)

AC_CHECK_HEADERS(stddef.h string.h strings.h stdlib.h time.h unistd.h)
AC_CHECK_HEADERS(fcntl.h sys/user.h sys/file.h sys/time.h termcap.h termcap/termcap.h)
AC_CHECK_HEADERS(sys/types.h sys/select.h sys/socket.h netinet/tcp.h netinet/in.h netdb.h)
AC_HEADER_TIME
AC_HEADER_DIRENT
AC_CHECK_FUNCS(fcntl getpagesize setitimer sysconf fdopen getuid getgid)
AC_CHECK_FUNCS(strlcpy strlcat fgetln)
AC_CHECK_FUNCS(open64)

if test x$check_mono = xyes; then
	PKG_CHECK_MODULES(MONO, $mono_pc >= $MONO_REQUIRED_VERSION)
	AC_SUBST(MONO_CFLAGS)
	AC_SUBST(MONO_LIBS)

	AC_ARG_WITH(xsp,
	[  --with-xsp              Enable XSP support (experimental)],
	with_xsp=yes, with_xsp=no)

	if test "x$with_xsp" = "xyes" ; then
	   PKG_CHECK_MODULES(XSP, xsp-2 >= $XSP_REQUIRED_VERSION)
	   XSP_EXE="`$PKG_CONFIG --variable=Executable xsp-2`"
	else
	   XSP_EXE=
	   XSP_CFLAGS=
	   XSP_LIBS=
	fi
	AC_SUBST(XSP_EXE)
	AC_SUBST(XSP_CFLAGS)
	AC_SUBST(XSP_LIBS)

	#not sure why, but I cannot get this test to pass on OS X.
	if test x$platform != xi386darwin ; then
	AC_MSG_CHECKING([Whether your Mono is working])
	old_CFLAGS=$CFLAGS
	CFLAGS=$MONO_CFLAGS
	AC_TRY_COMPILE([#include <mono/metadata/mono-debug.h>
	#include <mono/metadata/debug-mono-symfile.h>
	], [
	#if MONO_DEBUGGER_MAJOR_VERSION != $debugger_major_version
	#error "Your mono is too old for this version of the debugger."
	#endif
	#if MONO_DEBUGGER_MINOR_VERSION < $min_debugger_minor_version
	#error "Your mono is too old for this version of the debugger."
	#endif
	#if MONO_SYMBOL_FILE_MAJOR_VERSION != $symfile_major_version
	#error "Your mono is too old for this version of the debugger."
	#endif
	#if MONO_SYMBOL_FILE_MINOR_VERSION < $min_symfile_minor_version
	#error "Your mono is too old for this version of the debugger."
	#endif
	], mono_working=yes, mono_working=no)
	AC_MSG_RESULT($mono_working)
	CFLAGS=$old_CFLAGS
	if test x$mono_working != xyes; then
	   AC_MSG_ERROR([*** Your Mono is too old for this version of the debugger.])
	fi

	AC_MSG_CHECKING([Whether attaching is supported in this version of the Mono runtime])
	old_CFLAGS=$CFLAGS
	CFLAGS=$MONO_CFLAGS
	#define MONO_DEBUGGER_MAJOR_VERSION			81
	#define MONO_DEBUGGER_MINOR_VERSION			3
	AC_TRY_COMPILE([#include <mono/metadata/mono-debug.h>
	#include <mono/metadata/debug-mono-symfile.h>
	], [
	#if MONO_DEBUGGER_MAJOR_VERSION < 81
	#error "Major version older than 81."
	#endif
	#if MONO_DEBUGGER_MAJOR_VERSION == 81
	#if MONO_DEBUGGER_MINOR_VERSION < 3
	#error "Minor version older than 3."
	#endif
	#endif
	], attaching_supported=yes, attaching_supported=no)
	AC_MSG_RESULT($attaching_supported)
	CFLAGS=$old_CFLAGS
	else
	attaching_supported=no
	fi

	if test x$have_mono_trunk = xtrue; then
	   AC_DEFINE([USING_MONO_FROM_TRUNK], [1], [Whether we're using Mono from trunk])
	fi
fi
AM_CONDITIONAL(MONO_TRUNK, test x$have_mono_trunk = xtrue)
AM_CONDITIONAL(ATTACHING_SUPPORTED, test x$attaching_supported = xyes)
AM_CONDITIONAL(HAVE_XSP, test "x$with_xsp" = "xyes")

martin_private=no
if test "x$from_svn" = "xyes"; then
  if test x`hostname --fqdn` = x'gondor.trier.ximian.com'; then
    if test x"$prefix" == "x/work/gondor/INSTALL" ; then
      echo "Experimental features are disabled in the Gondor tree."
    else
      echo "Enabling experimental features."
      martin_private=yes
    fi
  fi
fi
AM_CONDITIONAL(MARTIN_PRIVATE, test x$martin_private = xyes)

AM_CONDITIONAL(DISABLED, false)

AM_CONDITIONAL(BUILD_SYSDEPS, test "x$build_sysdeps" = "xyes")
AM_CONDITIONAL(REMOTE_BACKEND, test "x$remote_backend" = "xyes")
AM_CONDITIONAL(LIBRARY_BACKEND, test "x$library_backend" = "xyes")
AM_CONDITIONAL(CSHARP_LIBRARY, test "x$csharp_library" = "xyes")

AC_OUTPUT([
Makefile
mono-debugger.pc
mono-debugger-frontend.pc
interface/Makefile
classes/Makefile
build/Makefile
build/Mono.Debugger.dll.config
sysdeps/Makefile
sysdeps/server/Makefile
backend/Makefile
backend/arch/Makefile
backend/mono/Makefile
backend/os/Makefile
backend/server/Makefile
backend/mdb-server/Makefile
symbolwriter/Makefile
languages/Makefile
languages/mono/Makefile
languages/native/Makefile
frontend/Makefile
frontend/jay/Makefile
test/Makefile
test/src/Makefile
test/misc/Makefile
test/framework/Makefile
test/testsuite/Makefile
doc/Makefile
])
